# # -*- coding: utf-8 -*-
# """Organ_Classification_model.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/19VltqAllsYAZ811sPl0x2CArqPgQmMUJ
# """

# # IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# # RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
# import kagglehub
# kagglehub.login()

# # IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# # THEN FEEL FREE TO DELETE THIS CELL.
# # NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# # ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# # NOTEBOOK.

# #raddar_chest_xrays_tuberculosis_from_india_path = kagglehub.dataset_download('raddar/chest-xrays-tuberculosis-from-india')
# pranavraikokte_covid19_image_dataset_path = kagglehub.dataset_download('pranavraikokte/covid19-image-dataset')
# tolgadincer_labeled_chest_xray_images_path = kagglehub.dataset_download('tolgadincer/labeled-chest-xray-images')
# nazmul0087_ct_kidney_dataset_normal_cyst_tumor_and_stone_path = kagglehub.dataset_download('nazmul0087/ct-kidney-dataset-normal-cyst-tumor-and-stone')
# gunavenkatdoddi_eye_diseases_classification_path = kagglehub.dataset_download('gunavenkatdoddi/eye-diseases-classification')
# #sujaykapadnis_chest_diseases_by_medical_imaging_and_cough_sounds_path = kagglehub.dataset_download('sujaykapadnis/chest-diseases-by-medical-imaging-and-cough-sounds')
# #amrutsardesh_efficientnetb0_tensorflow2_default_1_path = kagglehub.model_download('amrutsardesh/efficientnetb0/TensorFlow2/default/1')

# print('Data source import complete.')

import os

def find_all_files(directory):
    for root, dirs, files in os.walk(directory):
        for file in files:
            yield os.path.join(root, file)

# Example usage
directory_to_search = nazmul0087_ct_kidney_dataset_normal_cyst_tumor_and_stone_path
for file_path in find_all_files(directory_to_search):
    print(file_path)

"""
chest : /root/.cache/kagglehub/datasets/pranavraikokte/covid19-image-dataset/versions/2/Covid19-dataset/train/Normal
eye : /root/.cache/kagglehub/datasets/gunavenkatdoddi/eye-diseases-classification/versions/1/dataset/normal
kidney : /root/.cache/kagglehub/datasets/nazmul0087/ct-kidney-dataset-normal-cyst-tumor-and-stone/versions/1/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Normal
"""

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="nb0lpwpYXEsbbo5uinX3")
project = rf.workspace("liver-tumor").project("liver-tumor-detection")
version = project.version(2)
dataset = version.download("yolov8")

from roboflow import Roboflow
rf = Roboflow(api_key="nb0lpwpYXEsbbo5uinX3")
project = rf.workspace("roboflow-100").project("liver-disease")
version = project.version(2)
dataset = version.download("yolov8")

from roboflow import Roboflow
rf = Roboflow(api_key="nb0lpwpYXEsbbo5uinX3")
project = rf.workspace("aabbcceeffgg").project("brain-tumor-detection-69d9s")
version = project.version(2)
dataset = version.download("yolov8")

import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import seaborn as sns
import tensorflow as tf
# find version of tensorflow
print(tf.__version__)

# data_dir = {
#     "Chest" : "/root/.cache/kagglehub/datasets/pranavraikokte/covid19-image-dataset/versions/2/Covid19-dataset/train/Normal",
#     "Liver-Disease" : "/content/liver-disease-2/train/images",
#     "Liver-Tumor" : "/content/Liver-Tumor-Detection-2/train/images",
#     "Brain" : "/content/Brain-Tumor-Detection-2/train/images",
#     "Eye" : "/root/.cache/kagglehub/datasets/gunavenkatdoddi/eye-diseases-classification/versions/1/dataset/normal",
#     "Kidney" : "/root/.cache/kagglehub/datasets/nazmul0087/ct-kidney-dataset-normal-cyst-tumor-and-stone/versions/1/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Normal"
# }

# CLASSES = list(data_dir.keys())
# print(CLASSES)

import os
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import seaborn as sns


data_dir = {
    "Chest" : "/root/.cache/kagglehub/datasets/pranavraikokte/covid19-image-dataset/versions/2/Covid19-dataset/train/Normal",
    "Liver-Disease" : "/content/liver-disease-2/train/images",
    "Liver-Tumor" : "/content/Liver-Tumor-Detection-2/train/images",
    "Brain" : "/content/Brain-Tumor-Detection-2/train/images",
    "Eye" : "/root/.cache/kagglehub/datasets/gunavenkatdoddi/eye-diseases-classification/versions/1/dataset/normal",
    "Kidney" : "/root/.cache/kagglehub/datasets/nazmul0087/ct-kidney-dataset-normal-cyst-tumor-and-stone/versions/1/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/CT-KIDNEY-DATASET-Normal-Cyst-Tumor-Stone/Normal"
}


IMG_SIZE = (128, 128)
LIMIT = 100
CLASSES = list(data_dir.keys())


def load_images(data_dir, limit=LIMIT):
    images, labels = [], []
    for label, path in data_dir.items():
        count = 0
        for file in os.listdir(path):
            if count >= limit:
                break
            try:
                img = load_img(os.path.join(path, file), target_size=IMG_SIZE)
                img = img_to_array(img) / 255.0  # Normalize
                images.append(img)
                labels.append(CLASSES.index(label))
                count += 1
            except Exception as e:
                print(f"Error loading image {file}: {e}")
    return np.array(images), np.array(labels)


images, labels = load_images(data_dir)


X_train, X_test, y_train, y_test = train_test_split(images, labels, test_size=0.2, random_state=42, stratify=labels)

# encoding
y_train = np.eye(len(CLASSES))[y_train]
y_test = np.eye(len(CLASSES))[y_test]

"""
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(CLASSES), activation='softmax')
])
"""
def organ_model(input_shape, num_classes):
    model = Sequential([
        Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        MaxPooling2D(pool_size=(2, 2)),
        Conv2D(64, (3, 3), activation='relu'),
        MaxPooling2D(pool_size=(2, 2)),
        Flatten(),
        Dense(128, activation='relu'),
        Dropout(0.5),
        Dense(num_classes, activation='softmax')
    ])
    return model

input_shape = (IMG_SIZE[0], IMG_SIZE[1], 3)
num_classes = len(CLASSES)
model = organ_model(input_shape, num_classes)

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

print(model.summary())

history = model.fit(X_train, y_train, epochs=15, validation_split=0.2, batch_size=16)


test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_acc}")

# training accuracy and vali accuracy ploting
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('Accuracy')

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('Loss')

plt.show()

# Predictions on test data
y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)
y_test_classes = np.argmax(y_test, axis=1)

# Confusion Matrix
cm = confusion_matrix(y_test_classes, y_pred_classes)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', xticklabels=CLASSES, yticklabels=CLASSES, cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.title('Confusion Matrix')
plt.show()

# Classification Report
print("Classification Report:")
print(classification_report(y_test_classes, y_pred_classes, target_names=CLASSES))

# Testing with new images
def predict_image(image_path):
    img = load_img(image_path, target_size=IMG_SIZE)
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)  # Add batch dimension
    prediction = model.predict(img_array)
    predicted_class = CLASSES[np.argmax(prediction)]
    plt.imshow(img)
    plt.title(f"Predicted: {predicted_class}")
    plt.axis('off')
    plt.show()

test_image = "/content/Liver-Tumor-Detection-2/test/images/image-0003_jpg.rf.aa1065809b11221f3a08182f3b211d60.jpg"
predict_image(test_image)

def plot_predictions_kidney(X_test_kidney, y_test_kidney, y_pred_kidney):
    fig, axes = plt.subplots(3, 3, figsize=(12, 12))
    axes = axes.ravel()
    for i in range(9):
        ax = axes[i]
        ax.imshow(X_test_kidney[i])
        ax.axis('off')
        ax.set_title(f"True: {CLASSES[np.argmax(y_test_kidney[i])]} | Pred: {CLASSES[np.argmax(y_pred[i])]}")
    plt.suptitle("True vs Predicted")
    plt.show()

plot_predictions_kidney(X_test, y_test, y_pred)

# Save the trained model
model_save_path = 'h5_organ_classifier.h5'
model.save(model_save_path)
print(f"Model saved to {model_save_path}")

model.save('keras_organ_classifier.keras')

