# -*- coding: utf-8 -*-
"""RAG_MDB_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bWQWGW-51REbvngWnrnptKr4PmNWEDTA

This is specific for kidney, update clinical histories and diseases 
Lungs:
CLINICAL_HISTORIES = {
    "D012907":"Smoking history",
    "D001249": "Asthma",
    "D002411": "Chronic bronchitis",
    "D062887": "Occupational exposure to dust":,
    "D005196":"Family history of lung disease": ,
    "D011658": "Pulmonary fibrosis": ,
    "D014376": "Tuberculosis": ,
    "D011014": "Lung infections (e.g., pneumonia)": ,
    "D000900": "Air pollution exposure":,
    "D000544": "Allergies" 
}

DISEASES = {
    "C34.9": "Lung Cancer",
    "J44.9": "Chronic Obstructive Pulmonary Disease (COPD)",
    "J45.9":"Asthma",
    "J84.10":"Pulmonary Fibrosis",
    "J18.9": "Pneumonia"
}

Liver:
CLINICAL_HISTORIES = {
    "D006509": "Hepatitis B",
    "D006526": "Hepatitis C",
    "D009765": "Obesity",
    "D000428": "Alcohol use",
    "D005196": "Family history of liver disease",
    "D003920": "Diabetes",
    "D006973": "Hypertension",
    "D001327": "Autoimmune disease",
    "D005706": "Gallbladder disease",
    "D006943": "High cholesterol"
}

DISEASES = {
    "C22.0": "Liver Tumor",
    "K72.0": "Inflammation",
    "K75.9": "Ballooning",
    "K74.0": "Fibrosis",
    "K76.0": "Steatosis"
}

Eyes:
CLINICAL_HISTORIES = {
    "D009216": "Myopia",
    "D006973": "Hyperopia",
    "D005931": "Glaucoma",
    "D002386": "Cataracts",
    "D008268":"Macular Degeneration",
    "D003920": "Diabetic Retinopathy",
    "D010063": "Eye Injury",
    "D005196": "Family history of eye diseases",
}

DISEASES = {
    "H33.0": "Retinal Detachment",
    "H40.9": "Glaucoma",
    "H26.9": "Cataracts",
    "H35.3": "Macular Degeneration",
    "H10.9": "Conjunctivitis",
}

Brain:
CLINICAL_HISTORIES = {
    "D001930":"Traumatic brain injury",  
    "D020521":"Stroke",  
    "D004827":"Epilepsy", 
    "D008881":"Migraine",
    "D003704":"Dementia",  
    "D006973":"Hypertension", 
    "D003865":"Depression",  
    "D000428":"Alcohol abuse",  
    "D005196":"Family history of neurological diseases",  
}

DISEASES = {
    "D32.9":"Meningioma", 
    "D35.2": "Pituitary Tumor",
    "D43.0": "Glioma",  
}
"""




import pandas as pd

# Define mappings
CLINICAL_HISTORIES = {
    "D007669": "Kidney Stones",
    "D002477": "Chronic Kidney Disease",
    "D006973": "Hypertension",
    "D003920": "Diabetes",
    "D007690": "Polycystic Kidney Disease",
    "D014552": "Urinary Tract Infection",
    "D005196": "Family history of kidney disease",
    "D020405": "Drug Toxicity",
}

DISEASES = {
    "N20.0" : "Kidney Stones",
    "N28.1" : "Kidney Cyst",
    "C64.9":"Kidney Tumor",
}


# Load the CSV
df = pd.read_csv("/content/T1_kidney.csv")

# Debugging: Check sample data
print("Sample Clinical Histories:", df["Clinical Histories"].head())
print("Sample Diseases:", df["Disease"].head())

# Function to process multiple codes in a cell
def process_hybrid_values(cell, mapping_dict):
    if pd.isna(cell):  # Handle missing values
        return "Unknown"
    values = [value.strip() for value in cell.split(",")]  # Split and strip whitespace
    hybrid_values = [f"{value}: {mapping_dict.get(value, 'Unknown')}" for value in values]
    return ", ".join(hybrid_values)

# Map clinical histories and diseases
df["clinical_history_hybrid"] = df["Clinical Histories"].map(lambda x: process_hybrid_values(x, CLINICAL_HISTORIES))
df["disease_hybrid"] = df["Disease"].map(lambda x: process_hybrid_values(x, DISEASES))

# Debugging: Check mapping results
print("Clinical History Hybrid (Sample):", df["clinical_history_hybrid"].head())
print("Disease Hybrid (Sample):", df["disease_hybrid"].head())

# Save augmented dataset
df.to_csv("augmented_kidney_data.csv", index=False)

!pip install pinecone
!pip install sentence-transformers

#pcsk_76sA86_9DeHgRYds1BXvcndMbEyvKKtUrqPTeuUfbnVsdTm3PHQGi1yjix16aEvWRpHuQj - pinecone MDB







"""The snippet below was to prove that both hybrid and textual mappings have a good similarity"""

from scipy.spatial.distance import cosine
from sentence_transformers import SentenceTransformer

# Load MedEmbed
embedding_model = SentenceTransformer('abhinand/MedEmbed-large-v0.1')

# Encode textual names and hybrid representations
textual_embedding = embedding_model.encode(["Hepatitis B, Obesity"])[0]
hybrid_embedding = embedding_model.encode(["D006509: Hepatitis B, D009765: Obesity"])[0]


# Calculate similarity
similarity = 1 - cosine(textual_embedding, hybrid_embedding)
print(f"Similarity between text and hybrid representation: {similarity}")







"""Langchain approach"""

!pip install langchain pinecone-client sentence-transformers

import os
os.environ["PINECONE_API_KEY"] = "your-pinecone-apikey"

from pinecone import Pinecone
from langchain_pinecone import PineconeVectorStore
from langchain.embeddings import HuggingFaceEmbeddings
embedding_model = HuggingFaceEmbeddings(model_name="abhinand/MedEmbed-large-v0.1")

pc = Pinecone(api_key=os.environ["PINECONE_API_KEY"])
index = pc.Index("your-index")
index_name = "your-index"
vectorstore = PineconeVectorStore(index_name=index_name, embedding=embedding_model)

!pip install langchain-pinecone

!pip install -U langchain-community

import pandas as pd
import numpy as np

# Load your dataset
df = pd.read_csv("/content/augmented_kidney_data.csv")

# Replace NaN with an empty string in the relevant columns      
df.fillna("", inplace=True)

# Prepare data for embedding
for _, row in df.iterrows():
    metadata = {
        "treatment_recommendations": str(row["Treatment Recommendations"]) or "No data",
        "possible_causes": str(row["Possible Causes"]) or "No data",
        "prescriptions": str(row["Prescriptions"]) or "No data",
        "blood_tests": str(row["Blood Tests"]) or "No data",
    }
    text = f"Age Range: {row['Age Range']}, Clinical History: {row['clinical_history_hybrid']}, Disease: {row['disease_hybrid']}, Features: {row['Features']}"

    # Validate text and metadata before uploading
    if all(isinstance(value, str) and value.strip() != "" for value in metadata.values()):
        # Upsert embedding with metadata
        vectorstore.add_texts([text], metadatas=[metadata], ids=[str(row.name)])
    else:
        print(f"Skipping invalid row: {row.name}")

print("Data upload complete!")

# Example queryry: Type 2 Diabetes, Hypertension, Disease: Non-Alcoholic Fatty Liver Disease"

# Perform similarity search
results = vectorstore.similarity_search(query, k=5)

# Display results
for result in results:
    print(f"Text: {result.page_content}")
    print(f"Metadata: {result.metadata}")

import openai

openai.api_key = "your-openai-api-key"

# Prepare prompt with retrieved data
retrieved_texts = [result.page_content for result in results]
prompt = f"""
Based on the following medical data:
{'\n\n'.join(retrieved_texts)}

Provide:
1. Treatment Recommendations
2. Possible Causes
3. Blood Tests
4. Prescriptions
"""

# Call GPT-4
response = openai.Completion.create(
    engine="text-davinci-004",
    prompt=prompt,
    max_tokens=500,
    temperature=0.7,
)

print(response.choices[0].text.strip())
